/*
* jQuery validation plug-in 1.7+
*
* http://bassistance.de/jquery-plugins/jquery-plugin-validation/
* http://docs.jquery.com/Plugins/Validation
*
* Copyright (c) 2006 - 2008 JÃ¶rn Zaefferer
*
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*/

(function(c) { c.extend(c.fn, { validate: function(f) { if (!this.length) { f && f.debug && window.console && console.warn("nothing selected, can't validate, returning nothing"); return } var g = c.data(this[0], 'validator'); if (g) { return g } g = new c.validator(f, this[0]); c.data(this[0], 'validator', g); if (g.settings.onsubmit) { this.find("input, button").filter(".cancel").click(function() { g.cancelSubmit = true }); if (g.settings.submitHandler) { this.find("input, button").filter(":submit").click(function() { g.submitButton = this }) } this.submit(function(b) { if (g.settings.debug) b.preventDefault(); function d() { if (g.settings.submitHandler) { if (g.submitButton) { var a = c("<input type='hidden'/>").attr("name", g.submitButton.name).val(g.submitButton.value).appendTo(g.currentForm) } g.settings.submitHandler.call(g, g.currentForm); if (g.submitButton) { a.remove() } return false } return true } if (g.cancelSubmit) { g.cancelSubmit = false; return d() } if (g.form()) { if (g.pendingRequest) { g.formSubmitted = true; return false } return d() } else { g.focusInvalid(); return false } }) } return g }, valid: function() { if (c(this[0]).is('form')) { return this.validate().form() } else { var a = true; var b = c(this[0].form).validate(); this.each(function() { a &= b.element(this) }); return a } }, removeAttrs: function(d) { var f = {}, g = this; c.each(d.split(/\s/), function(a, b) { f[b] = g.attr(b); g.removeAttr(b) }); return f }, rules: function(d, f) { var g = this[0]; if (d) { var h = c.data(g.form, 'validator').settings; var i = h.rules; var k = c.validator.staticRules(g); switch (d) { case "add": c.extend(k, c.validator.normalizeRule(f)); i[g.name] = k; if (f.messages) h.messages[g.name] = c.extend(h.messages[g.name], f.messages); break; case "remove": if (!f) { delete i[g.name]; return k } var l = {}; c.each(f.split(/\s/), function(a, b) { l[b] = k[b]; delete k[b] }); return l } } var j = c.validator.normalizeRules(c.extend({}, c.validator.metadataRules(g), c.validator.classRules(g), c.validator.attributeRules(g), c.validator.staticRules(g)), g); if (j.required) { var m = j.required; delete j.required; j = c.extend({ required: m }, j) } return j } }); c.extend(c.expr[":"], { blank: function(a) { return !c.trim("" + a.value) }, filled: function(a) { return !!c.trim("" + a.value) }, unchecked: function(a) { return !a.checked } }); c.validator = function(a, b) { this.settings = c.extend(true, {}, c.validator.defaults, a); this.currentForm = b; this.init() }; c.validator.format = function(d, f) { if (arguments.length == 1) return function() { var g = c.makeArray(arguments); g.unshift(d); return c.validator.format.apply(this, g) }; if (arguments.length > 2 && f.constructor != Array) { f = c.makeArray(arguments).slice(1) } if (f.constructor != Array) { f = [f] } c.each(f, function(a, b) { d = d.replace(new RegExp("\\{" + a + "\\}", "g"), b) }); return d }; c.extend(c.validator, { defaults: { messages: {}, groups: {}, rules: {}, errorClass: "error", validClass: "valid", errorElement: "label", focusInvalid: true, errorContainer: c([]), errorLabelContainer: c([]), onsubmit: true, ignore: [], ignoreTitle: false, onfocusin: function(a) { this.lastActive = a; if (this.settings.focusCleanup && !this.blockFocusCleanup) { this.settings.unhighlight && this.settings.unhighlight.call(this, a, this.settings.errorClass, this.settings.validClass); this.addWrapper(this.errorsFor(a)).hide() } }, onfocusout: function(a) { if (!this.checkable(a) && (a.name in this.submitted || !this.optional(a))) { this.element(a) } }, onkeyup: function(a) { if (a.name in this.submitted || a == this.lastElement) { this.element(a) } }, onclick: function(a) { if (a.name in this.submitted) this.element(a); else if (a.parentNode.name in this.submitted) this.element(a.parentNode) }, highlight: function(a, b, d) { c(a).addClass(b).removeClass(d) }, unhighlight: function(a, b, d) { c(a).removeClass(b).addClass(d) } }, setDefaults: function(a) { c.extend(c.validator.defaults, a) }, messages: { required: "This field is required.", remote: "Please fix this field.", email: "Please enter a valid email address.", url: "Please enter a valid URL.", date: "Please enter a valid date.", dateISO: "Please enter a valid date (ISO).", number: "Please enter a valid number.", digits: "Please enter only digits.", creditcard: "Please enter a valid credit card number.", equalTo: "Please enter the same value again.", accept: "Please enter a value with a valid extension.", maxlength: c.validator.format("Please enter no more than {0} characters."), minlength: c.validator.format("Please enter at least {0} characters."), rangelength: c.validator.format("Please enter a value between {0} and {1} characters long."), range: c.validator.format("Please enter a value between {0} and {1}."), max: c.validator.format("Please enter a value less than or equal to {0}."), min: c.validator.format("Please enter a value greater than or equal to {0}.") }, autoCreateRanges: false, prototype: { init: function() { this.labelContainer = c(this.settings.errorLabelContainer); this.errorContext = this.labelContainer.length && this.labelContainer || c(this.currentForm); this.containers = c(this.settings.errorContainer).add(this.settings.errorLabelContainer); this.submitted = {}; this.valueCache = {}; this.pendingRequest = 0; this.pending = {}; this.invalid = {}; this.reset(); var g = (this.groups = {}); c.each(this.settings.groups, function(d, f) { c.each(f.split(/\s/), function(a, b) { g[b] = d }) }); var h = this.settings.rules; c.each(h, function(a, b) { h[a] = c.validator.normalizeRule(b) }); function i(a) { var b = c.data(this[0].form, "validator"), d = "on" + a.type.replace(/^validate/, ""); b.settings[d] && b.settings[d].call(b, this[0]) } c(this.currentForm).validateDelegate(":text, :password, :file, select, textarea", "focusin focusout keyup", i).validateDelegate(":radio, :checkbox, select, option", "click", i); if (this.settings.invalidHandler) c(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler) }, form: function() { this.checkForm(); c.extend(this.submitted, this.errorMap); this.invalid = c.extend({}, this.errorMap); if (!this.valid()) c(this.currentForm).triggerHandler("invalid-form", [this]); this.showErrors(); return this.valid() }, checkForm: function() { this.prepareForm(); for (var a = 0, b = (this.currentElements = this.elements()); b[a]; a++) { if (this.findByName(b[a].name).length != undefined && this.findByName(b[a].name).length > 1) { for (var d = 0; d < this.findByName(b[a].name).length; d++) { this.check(this.findByName(b[a].name)[d]) } } else { this.check(b[a]) } } return this.valid() }, element: function(a) { a = this.clean(a); this.lastElement = a; this.prepareElement(a); this.currentElements = c(a); var b = this.check(a); if (b) { delete this.invalid[a.name] } else { this.invalid[a.name] = true } if (!this.numberOfInvalids()) { this.toHide = this.toHide.add(this.containers) } this.showErrors(); return b }, showErrors: function(b) { if (b) { c.extend(this.errorMap, b); this.errorList = []; for (var d in b) { this.errorList.push({ message: b[d], element: this.findByName(d)[0] }) } this.successList = c.grep(this.successList, function(a) { return !(a.name in b) }) } this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors() }, resetForm: function() { if (c.fn.resetForm) c(this.currentForm).resetForm(); this.submitted = {}; this.prepareForm(); this.hideErrors(); this.elements().removeClass(this.settings.errorClass) }, numberOfInvalids: function() { return this.objectLength(this.invalid) }, objectLength: function(a) { var b = 0; for (var d in a) b++; return b }, hideErrors: function() { this.addWrapper(this.toHide).hide() }, valid: function() { return this.size() == 0 }, size: function() { return this.errorList.length }, focusInvalid: function() { if (this.settings.focusInvalid) { try { c(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin") } catch (e) { } } }, findLastActive: function() { var b = this.lastActive; return b && c.grep(this.errorList, function(a) { return a.element.name == b.name }).length == 1 && b }, elements: function() { var a = this, b = {}; return c([]).add(this.currentForm.elements).filter(":input").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function() { !this.name && a.settings.debug && window.console && console.error("%o has no name assigned", this); if (this.name in b || !a.objectLength(c(this).rules())) return false; b[this.name] = true; return true }) }, clean: function(a) { return c(a)[0] }, errors: function() { return c(this.settings.errorElement + "." + this.settings.errorClass, this.errorContext) }, reset: function() { this.successList = []; this.errorList = []; this.errorMap = {}; this.toShow = c([]); this.toHide = c([]); this.currentElements = c([]) }, prepareForm: function() { this.reset(); this.toHide = this.errors().add(this.containers) }, prepareElement: function(a) { this.reset(); this.toHide = this.errorsFor(a) }, check: function(a) { a = this.clean(a); if (this.checkable(a)) { a = this.findByName(a.name).not(this.settings.ignore)[0] } var b = c(a).rules(); var d = false; for (var f in b) { var g = { method: f, parameters: b[f] }; try { var h = c.validator.methods[f].call(this, a.value.replace(/\r/g, ""), a, g.parameters); if (h == "dependency-mismatch") { d = true; continue } d = false; if (h == "pending") { this.toHide = this.toHide.not(this.errorsFor(a)); return } if (!h) { this.formatAndAdd(a, g); return false } } catch (e) { this.settings.debug && window.console && console.log("exception occured when checking element " + a.id + ", check the '" + g.method + "' method", e); throw e; } } if (d) return; if (this.objectLength(b)) this.successList.push(a); return true }, customMetaMessage: function(a, b) { if (!c.metadata) return; var d = this.settings.meta ? c(a).metadata()[this.settings.meta] : c(a).metadata(); return d && d.messages && d.messages[b] }, customMessage: function(a, b) { var d = this.settings.messages[a]; return d && (d.constructor == String ? d : d[b]) }, findDefined: function() { for (var a = 0; a < arguments.length; a++) { if (arguments[a] !== undefined) return arguments[a] } return undefined }, defaultMessage: function(a, b) { return this.findDefined(this.customMessage(a.name, b), this.customMetaMessage(a, b), !this.settings.ignoreTitle && a.title || undefined, c.validator.messages[b], "<strong>Warning: No message defined for " + a.name + "</strong>") }, formatAndAdd: function(a, b) { var d = this.defaultMessage(a, b.method), f = /\$?\{(\d+)\}/g; if (typeof d == "function") { d = d.call(this, b.parameters, a) } else if (f.test(d)) { d = jQuery.format(d.replace(f, '{$1}'), b.parameters) } this.errorList.push({ message: d, element: a }); this.errorMap[a.name] = d; this.submitted[a.name] = d }, addWrapper: function(a) { if (this.settings.wrapper) a = a.add(a.parent(this.settings.wrapper)); return a }, defaultShowErrors: function() { for (var a = 0; this.errorList[a]; a++) { var b = this.errorList[a]; this.settings.highlight && this.settings.highlight.call(this, b.element, this.settings.errorClass, this.settings.validClass); this.showLabel(b.element, b.message) } if (this.errorList.length) { this.toShow = this.toShow.add(this.containers) } if (this.settings.success) { for (var a = 0; this.successList[a]; a++) { this.showLabel(this.successList[a]) } } if (this.settings.unhighlight) { for (var a = 0, d = this.validElements(); d[a]; a++) { this.settings.unhighlight.call(this, d[a], this.settings.errorClass, this.settings.validClass) } } this.toHide = this.toHide.not(this.toShow); this.hideErrors(); this.addWrapper(this.toShow).show() }, validElements: function() { return this.currentElements.not(this.invalidElements()) }, invalidElements: function() { return c(this.errorList).map(function() { return this.element }) }, showLabel: function(a, b) { var d = this.errorsFor(a); if (d.length) { d.removeClass().addClass(this.settings.errorClass); d.attr("generated") && d.html(b) } else { d = c("<" + this.settings.errorElement + "/>").attr({ "for": this.idOrName(a), generated: true }).addClass(this.settings.errorClass).html(b || ""); if (this.settings.wrapper) { d = d.hide().show().wrap("<" + this.settings.wrapper + "/>").parent() } if (!this.labelContainer.append(d).length) this.settings.errorPlacement ? this.settings.errorPlacement(d, c(a)) : d.insertAfter(a) } if (!b && this.settings.success) { d.text(""); typeof this.settings.success == "string" ? d.addClass(this.settings.success) : this.settings.success(d) } this.toShow = this.toShow.add(d) }, errorsFor: function(a) { var b = this.idOrName(a); return this.errors().filter(function() { return c(this).attr('for') == b }) }, idOrName: function(a) { return this.groups[a.name] || (this.checkable(a) ? a.name : a.id || a.name) }, checkable: function(a) { return /radio|checkbox/i.test(a.type) }, findByName: function(d) { var f = this.currentForm; return c(document.getElementsByName(d)).map(function(a, b) { return b.form == f && b.name == d && b || null }) }, getLength: function(a, b) { switch (b.nodeName.toLowerCase()) { case 'select': return c("option:selected", b).length; case 'input': if (this.checkable(b)) return this.findByName(b.name).filter(':checked').length } return a.length }, depend: function(a, b) { return this.dependTypes[typeof a] ? this.dependTypes[typeof a](a, b) : true }, dependTypes: { "boolean": function(a, b) { return a }, "string": function(a, b) { return !!c(a, b.form).length }, "function": function(a, b) { return a(b) } }, optional: function(a) { return !c.validator.methods.required.call(this, c.trim(a.value), a) && "dependency-mismatch" }, startRequest: function(a) { if (!this.pending[a.name]) { this.pendingRequest++; this.pending[a.name] = true } }, stopRequest: function(a, b) { this.pendingRequest--; if (this.pendingRequest < 0) this.pendingRequest = 0; delete this.pending[a.name]; if (b && this.pendingRequest == 0 && this.formSubmitted && this.form()) { c(this.currentForm).submit(); this.formSubmitted = false } else if (!b && this.pendingRequest == 0 && this.formSubmitted) { c(this.currentForm).triggerHandler("invalid-form", [this]); this.formSubmitted = false } }, previousValue: function(a) { return c.data(a, "previousValue") || c.data(a, "previousValue", { old: null, valid: true, message: this.defaultMessage(a, "remote") }) } }, classRuleSettings: { required: { required: true }, email: { email: true }, url: { url: true }, date: { date: true }, dateISO: { dateISO: true }, dateDE: { dateDE: true }, number: { number: true }, numberDE: { numberDE: true }, digits: { digits: true }, creditcard: { creditcard: true} }, addClassRules: function(a, b) { a.constructor == String ? this.classRuleSettings[a] = b : c.extend(this.classRuleSettings, a) }, classRules: function(a) { var b = {}; var d = c(a).attr('class'); d && c.each(d.split(' '), function() { if (this in c.validator.classRuleSettings) { c.extend(b, c.validator.classRuleSettings[this]) } }); return b }, attributeRules: function(a) { var b = {}; var d = c(a); for (var f in c.validator.methods) { var g = d.attr(f); if (g) { b[f] = g } } if (b.maxlength && /-1|2147483647|524288/.test(b.maxlength)) { delete b.maxlength } return b }, metadataRules: function(a) { if (!c.metadata) return {}; var b = c.data(a.form, 'validator').settings.meta; return b ? c(a).metadata()[b] : c(a).metadata() }, staticRules: function(a) { var b = {}; var d = c.data(a.form, 'validator'); if (d.settings.rules) { b = c.validator.normalizeRule(d.settings.rules[a.name]) || {} } return b }, normalizeRules: function(f, g) { c.each(f, function(a, b) { if (b === false) { delete f[a]; return } if (b.param || b.depends) { var d = true; switch (typeof b.depends) { case "string": d = !!c(b.depends, g.form).length; break; case "function": d = b.depends.call(g, g); break } if (d) { f[a] = b.param !== undefined ? b.param : true } else { delete f[a] } } }); c.each(f, function(a, b) { f[a] = c.isFunction(b) ? b(g) : b }); c.each(['minlength', 'maxlength', 'min', 'max'], function() { if (f[this]) { f[this] = Number(f[this]) } }); c.each(['rangelength', 'range'], function() { if (f[this]) { f[this] = [Number(f[this][0]), Number(f[this][1])] } }); if (c.validator.autoCreateRanges) { if (f.min && f.max) { f.range = [f.min, f.max]; delete f.min; delete f.max } if (f.minlength && f.maxlength) { f.rangelength = [f.minlength, f.maxlength]; delete f.minlength; delete f.maxlength } } if (f.messages) { delete f.messages } return f }, normalizeRule: function(a) { if (typeof a == "string") { var b = {}; c.each(a.split(/\s/), function() { b[this] = true }); a = b } return a }, addMethod: function(a, b, d) { c.validator.methods[a] = b; c.validator.messages[a] = d != undefined ? d : c.validator.messages[a]; if (b.length < 3) { c.validator.addClassRules(a, c.validator.normalizeRule(a)) } }, methods: { required: function(a, b, d) { if (!this.depend(d, b)) return "dependency-mismatch"; switch (b.nodeName.toLowerCase()) { case 'select': var f = c(b).val(); return f && f.length > 0; case 'input': if (this.checkable(b)) return this.getLength(a, b) > 0; default: return c.trim(a).length > 0 } }, remote: function(h, i, k) { if (this.optional(i)) return "dependency-mismatch"; var l = this.previousValue(i); if (!this.settings.messages[i.name]) this.settings.messages[i.name] = {}; l.originalMessage = this.settings.messages[i.name].remote; this.settings.messages[i.name].remote = l.message; k = typeof k == "string" && { url: k} || k; if (this.pending[i.name]) { return "pending" } if (l.old === h) { return l.valid } l.old = h; var j = this; this.startRequest(i); var m = {}; m[i.name] = h; c.ajax(c.extend(true, { url: k, mode: "abort", port: "validate" + i.name, dataType: "json", data: m, success: function(a) { j.settings.messages[i.name].remote = l.originalMessage; var b = a === true; if (b) { var d = j.formSubmitted; j.prepareElement(i); j.formSubmitted = d; j.successList.push(i); j.showErrors() } else { var f = {}; var g = (l.message = a || j.defaultMessage(i, "remote")); f[i.name] = c.isFunction(g) ? g(h) : g; j.showErrors(f) } l.valid = b; j.stopRequest(i, b) } }, k)); return "pending" }, minlength: function(a, b, d) { return this.optional(b) || this.getLength(c.trim(a), b) >= d }, maxlength: function(a, b, d) { return this.optional(b) || this.getLength(c.trim(a), b) <= d }, rangelength: function(a, b, d) { var f = this.getLength(c.trim(a), b); return this.optional(b) || (f >= d[0] && f <= d[1]) }, min: function(a, b, d) { return this.optional(b) || a >= d }, max: function(a, b, d) { return this.optional(b) || a <= d }, range: function(a, b, d) { return this.optional(b) || (a >= d[0] && a <= d[1]) }, email: function(a, b) { return this.optional(b) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(a) }, url: function(a, b) { return this.optional(b) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a) }, date: function(a, b) { return this.optional(b) || !/Invalid|NaN/.test(new Date(a)) }, dateISO: function(a, b) { return this.optional(b) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(a) }, number: function(a, b) { return this.optional(b) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(a) }, digits: function(a, b) { return this.optional(b) || /^\d+$/.test(a) }, creditcard: function(a, b) { if (this.optional(b)) return "dependency-mismatch"; if (/[^0-9-]+/.test(a)) return false; var d = 0, f = 0, g = false; a = a.replace(/\D/g, ""); for (var h = a.length - 1; h >= 0; h--) { var i = a.charAt(h); var f = parseInt(i, 10); if (g) { if ((f *= 2) > 9) f -= 9 } d += f; g = !g } return (d % 10) == 0 }, accept: function(a, b, d) { d = typeof d == "string" ? d.replace(/,/g, '|') : "png|jpe?g|gif"; return this.optional(b) || a.match(new RegExp(".(" + d + ")$", "i")) }, equalTo: function(a, b, d) { var f = c(d).unbind(".validate-equalTo").bind("blur.validate-equalTo", function() { c(b).valid() }); return a == f.val() } } }); c.format = c.validator.format })(jQuery); (function(g) { var h = {}; if (g.ajaxPrefilter) { g.ajaxPrefilter(function(a, b, d) { var f = a.port; if (a.mode == "abort") { if (h[f]) { h[f].abort() } h[f] = d } }) } else { var i = g.ajax; g.ajax = function(a) { var b = ("mode" in a ? a : g.ajaxSettings).mode, d = ("port" in a ? a : g.ajaxSettings).port; if (b == "abort") { if (h[d]) { h[d].abort() } return (h[d] = i.apply(this, arguments)) } return i.apply(this, arguments) } } })(jQuery); (function(h) { if (!jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener) { h.each({ focus: 'focusin', blur: 'focusout' }, function(b, d) { h.event.special[d] = { setup: function() { this.addEventListener(b, f, true) }, teardown: function() { this.removeEventListener(b, f, true) }, handler: function(a) { arguments[0] = h.event.fix(a); arguments[0].type = d; return h.event.handle.apply(this, arguments) } }; function f(a) { a = h.event.fix(a); a.type = d; return h.event.handle.call(this, a) } }) }; h.extend(h.fn, { validateDelegate: function(d, f, g) { return this.bind(f, function(a) { var b = h(a.target); if (b.is(d)) { return g.apply(b, arguments) } }) } }) })(jQuery);


