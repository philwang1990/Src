// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using KKday.PMS.B2S.Models.Package;
//
//    var scmPackagePriceModel = SCMPackagePriceModel.FromJson(jsonString);

namespace KKday.PMS.B2S.Models.Package.SCMPackagePriceModel
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using KKday.PMS.B2S.Models.Shared;

    public partial class SCMPackagePriceModel : ScmBaseModel
    {
        [JsonProperty("json")]
        public Json Json { get; set; }
    }

    public partial class Json
    {
        [JsonProperty("packageOid")]
        public long PackageOid { get; set; }

        [JsonProperty("prodOid")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ProdOid { get; set; }

        [JsonProperty("priceType")]
        public string PriceType { get; set; }

        [JsonProperty("costCalcMethod")]
        public string CostCalcMethod { get; set; }

        [JsonProperty("prodCurrCd")]
        public string ProdCurrCd { get; set; }

        [JsonProperty("price4NetOrg")]
        public long Price4NetOrg { get; set; }

        [JsonProperty("price4BegOld")]
        public long Price4BegOld { get; set; }

        [JsonProperty("price4EndOld")]
        public long Price4EndOld { get; set; }

        [JsonProperty("price1NetOrg")]
        public long Price1NetOrg { get; set; }

        [JsonProperty("price1BegOld")]
        public long Price1BegOld { get; set; }

        [JsonProperty("price1EndOld")]
        public long Price1EndOld { get; set; }

        [JsonProperty("price2NetOrg")]
        public long Price2NetOrg { get; set; }

        [JsonProperty("price2BegOld")]
        public long Price2BegOld { get; set; }

        [JsonProperty("price2EndOld")]
        public long Price2EndOld { get; set; }

        [JsonProperty("price3NetOrg")]
        public long Price3NetOrg { get; set; }

        [JsonProperty("price3BegOld")]
        public long Price3BegOld { get; set; }

        [JsonProperty("price3EndOld")]
        public long Price3EndOld { get; set; }

        [JsonProperty("minOrderQty")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MinOrderQty { get; set; }

        [JsonProperty("minOrderAdultQty")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MinOrderAdultQty { get; set; }

        [JsonProperty("supplierOid")]
        public long SupplierOid { get; set; }

        [JsonProperty("supplierUserUuid")]
        public Guid SupplierUserUuid { get; set; }

        [JsonProperty("deviceId")]
        public string DeviceId { get; set; }

        [JsonProperty("tokenKey")]
        public string TokenKey { get; set; }
    }

    public partial class ScmPackagePriceModel
    {
        public static ScmPackagePriceModel FromJson(string json) => JsonConvert.DeserializeObject<ScmPackagePriceModel>(json, KKday.PMS.B2S.Models.Package.SCMPackagePriceModel.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ScmPackagePriceModel self) => JsonConvert.SerializeObject(self, KKday.PMS.B2S.Models.Package.SCMPackagePriceModel.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
